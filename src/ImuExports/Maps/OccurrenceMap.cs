using CsvHelper.Configuration;
using ImuExports.Models;

namespace ImuExports.Maps
{
    public sealed class OccurrenceMap : CsvClassMap<Occurrence>
    {
        public OccurrenceMap()
        {
            Map(m => m.DctermsType).Name("dcterms:type");
            Map(m => m.DctermsModified).Name("dcterms:modified");
            Map(m => m.DctermsLanguage).Name("dcterms:language");
            Map(m => m.DctermsRights).Name("dcterms:rights");
            Map(m => m.DctermsRightsHolder).Name("dcterms:rightsHolder");
            Map(m => m.DctermsAccessRights).Name("dcterms:accessRights");
            Map(m => m.DctermsBibliographicCitation).Name("dcterms:bibliographicCitation");
            Map(m => m.DctermsReferences).Name("dcterms:references");
            Map(m => m.InstitutionId).Name("institutionID");
            Map(m => m.CollectionId).Name("collectionID");
            Map(m => m.DatasetId).Name("datasetID");
            Map(m => m.InstitutionCode).Name("institutionCode");
            Map(m => m.CollectionCode).Name("collectionCode");
            Map(m => m.DatasetName).Name("datasetName");
            Map(m => m.OwnerInstitutionCode).Name("ownerInstitutionCode");
            Map(m => m.BasisOfRecord).Name("basisOfRecord");
            Map(m => m.InformationWithheld).Name("informationWithheld");
            Map(m => m.DataGeneralizations).Name("dataGeneralizations");
            Map(m => m.DynamicProperties).Name("dynamicProperties");
            Map(m => m.OccurrenceID).Name("occurrenceID");
            Map(m => m.CatalogNumber).Name("catalogNumber");
            Map(m => m.OccurrenceRemarks).Name("occurrenceRemarks");
            Map(m => m.RecordNumber).Name("recordNumber");
            Map(m => m.RecordedBy).Name("recordedBy");
            Map(m => m.IndividualID).Name("individualID");
            Map(m => m.IndividualCount).Name("individualCount");
            Map(m => m.Sex).Name("sex");
            Map(m => m.LifeStage).Name("lifeStage");
            Map(m => m.ReproductiveCondition).Name("reproductiveCondition");
            Map(m => m.Behavior).Name("behavior");
            Map(m => m.EstablishmentMeans).Name("establishmentMeans");
            Map(m => m.OccurrenceStatus).Name("occurrenceStatus");
            Map(m => m.Preparations).Name("preparations");
            Map(m => m.Disposition).Name("disposition");
            Map(m => m.OtherCatalogNumbers).Name("otherCatalogNumbers");
            Map(m => m.PreviousIdentifications).Name("previousIdentifications");
            Map(m => m.AssociatedMedia).Name("associatedMedia");
            Map(m => m.AssociatedReferences).Name("associatedReferences");
            Map(m => m.AssociatedOccurrences).Name("associatedOccurrences");
            Map(m => m.AssociatedSequences).Name("associatedSequences");
            Map(m => m.AssociatedTaxa).Name("associatedTaxa");
            Map(m => m.EventID).Name("eventID");
            Map(m => m.SamplingProtocol).Name("samplingProtocol");
            Map(m => m.EventDate).Name("eventDate");
            Map(m => m.EventTime).Name("eventTime");
            Map(m => m.StartDayOfYear).Name("startDayOfYear");
            Map(m => m.EndDayOfYear).Name("endDayOfYear");
            Map(m => m.Year).Name("year");
            Map(m => m.Month).Name("month");
            Map(m => m.Day).Name("day");
            Map(m => m.VerbatimEventDate).Name("verbatimEventDate");
            Map(m => m.Habitat).Name("habitat");
            Map(m => m.FieldNumber).Name("fieldNumber");
            Map(m => m.FieldNotes).Name("fieldNotes");
            Map(m => m.EventRemarks).Name("eventRemarks");
            Map(m => m.LocationID).Name("locationID");
            Map(m => m.HigherGeographyID).Name("higherGeographyID");
            Map(m => m.HigherGeography).Name("higherGeography");
            Map(m => m.Continent).Name("continent");
            Map(m => m.WaterBody).Name("waterBody");
            Map(m => m.IslandGroup).Name("islandGroup");
            Map(m => m.Island).Name("island");
            Map(m => m.Country).Name("country");
            Map(m => m.CountryCode).Name("countryCode");
            Map(m => m.StateProvince).Name("stateProvince");
            Map(m => m.County).Name("county");
            Map(m => m.Municipality).Name("municipality");
            Map(m => m.Locality).Name("locality");
            Map(m => m.VerbatimLocality).Name("verbatimLocality");
            Map(m => m.VerbatimElevation).Name("verbatimElevation");
            Map(m => m.MinimumElevationInMeters).Name("minimumElevationInMeters");
            Map(m => m.MaximumElevationInMeters).Name("maximumElevationInMeters");
            Map(m => m.VerbatimDepth).Name("verbatimDepth");
            Map(m => m.MinimumDepthInMeters).Name("minimumDepthInMeters");
            Map(m => m.MaximumDepthInMeters).Name("maximumDepthInMeters");
            Map(m => m.MinimumDistanceAboveSurfaceInMeters).Name("minimumDistanceAboveSurfaceInMeters");
            Map(m => m.MaximumDistanceAboveSurfaceInMeters).Name("maximumDistanceAboveSurfaceInMeters");
            Map(m => m.LocationAccordingTo).Name("locationAccordingTo");
            Map(m => m.LocationRemarks).Name("locationRemarks");
            Map(m => m.VerbatimCoordinates).Name("verbatimCoordinates");
            Map(m => m.VerbatimLatitude).Name("verbatimLatitude");
            Map(m => m.VerbatimLongitude).Name("verbatimLongitude");
            Map(m => m.VerbatimCoordinateSystem).Name("verbatimCoordinateSystem");
            Map(m => m.VerbatimSRS).Name("verbatimSRS");
            Map(m => m.DecimalLatitude).Name("decimalLatitude");
            Map(m => m.DecimalLongitude).Name("decimalLongitude");
            Map(m => m.GeodeticDatum).Name("geodeticDatum");
            Map(m => m.CoordinateUncertaintyInMeters).Name("coordinateUncertaintyInMeters");
            Map(m => m.CoordinatePrecision).Name("coordinatePrecision");
            Map(m => m.PointRadiusSpatialFit).Name("pointRadiusSpatialFit");
            Map(m => m.FootprintWKT).Name("footprintWKT");
            Map(m => m.FootprintSRS).Name("footprintSRS");
            Map(m => m.FootprintSpatialFit).Name("footprintSpatialFit");
            Map(m => m.GeoreferencedBy).Name("georeferencedBy");
            Map(m => m.GeoreferencedDate).Name("georeferencedDate");
            Map(m => m.GeoreferenceProtocol).Name("georeferenceProtocol");
            Map(m => m.GeoreferenceSources).Name("georeferenceSources");
            Map(m => m.GeoreferenceVerificationStatus).Name("georeferenceVerificationStatus");
            Map(m => m.GeoreferenceRemarks).Name("georeferenceRemarks");
            Map(m => m.IdentificationID).Name("identificationID");
            Map(m => m.IdentifiedBy).Name("identifiedBy");
            Map(m => m.DateIdentified).Name("dateIdentified");
            Map(m => m.IdentificationReferences).Name("identificationReferences");
            Map(m => m.IdentificationVerificationStatus).Name("identificationVerificationStatus");
            Map(m => m.IdentificationRemarks).Name("identificationRemarks");
            Map(m => m.IdentificationQualifier).Name("identificationQualifier");
            Map(m => m.TypeStatus).Name("typeStatus");
            Map(m => m.TaxonID).Name("taxonID");
            Map(m => m.ScientificNameID).Name("scientificNameID");
            Map(m => m.AcceptedNameUsageID).Name("acceptedNameUsageID");
            Map(m => m.ParentNameUsageID).Name("parentNameUsageID");
            Map(m => m.OriginalNameUsageID).Name("originalNameUsageID");
            Map(m => m.NameAccordingToID).Name("nameAccordingToID");
            Map(m => m.NamePublishedInID).Name("namePublishedInID");
            Map(m => m.TaxonConceptID).Name("taxonConceptID");
            Map(m => m.ScientificName).Name("scientificName");
            Map(m => m.AcceptedNameUsage).Name("acceptedNameUsage");
            Map(m => m.ParentNameUsage).Name("parentNameUsage");
            Map(m => m.OriginalNameUsage).Name("originalNameUsage");
            Map(m => m.NameAccordingTo).Name("nameAccordingTo");
            Map(m => m.NamePublishedIn).Name("namePublishedIn");
            Map(m => m.NamePublishedInYear).Name("namePublishedInYear");
            Map(m => m.HigherClassification).Name("higherClassification");
            Map(m => m.Kingdom).Name("kingdom");
            Map(m => m.Phylum).Name("phylum");
            Map(m => m.Order).Name("order");
            Map(m => m.Family).Name("family");
            Map(m => m.Genus).Name("genus");
            Map(m => m.Subgenus).Name("subgenus");
            Map(m => m.SpecificEpithet).Name("specificEpithet");
            Map(m => m.InfraspecificEpithet).Name("infraspecificEpithet");
            Map(m => m.TaxonRank).Name("taxonRank");
            Map(m => m.VerbatimTaxonRank).Name("verbatimTaxonRank");
            Map(m => m.ScientificNameAuthorship).Name("scientificNameAuthorship");
            Map(m => m.VernacularName).Name("vernacularName");
            Map(m => m.NomenclaturalCode).Name("nomenclaturalCode");
            Map(m => m.TaxonomicStatus).Name("taxonomicStatus");
            Map(m => m.NomenclaturalStatus).Name("nomenclaturalStatus");
            Map(m => m.TaxonRemarks).Name("taxonRemarks");
        }
    }
}