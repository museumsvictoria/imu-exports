using CsvHelper.Configuration;
using ImuExports.Tasks.AtlasOfLivingAustralia.Models;

namespace ImuExports.Tasks.AtlasOfLivingAustralia.ClassMaps;

public sealed class OccurrenceClassMap : ClassMap<Occurrence>
{
    public OccurrenceClassMap()
    {
        Map(m => m.OccurrenceId).Index(0).Name("occurrenceID");
        Map(m => m.DctermsType).Index(1).Name("dcterms:type");
        Map(m => m.DctermsModified).Index(2).Name("dcterms:modified");
        Map(m => m.DctermsLanguage).Index(3).Name("dcterms:language");
        Map(m => m.DctermsLicense).Index(4).Name("dcterms:license");
        Map(m => m.DctermsRightsHolder).Index(5).Name("dcterms:rightsHolder");
        Map(m => m.InstitutionId).Index(6).Name("institutionID");
        Map(m => m.InstitutionCode).Index(7).Name("institutionCode");
        Map(m => m.CollectionCode).Index(8).Name("collectionCode");
        Map(m => m.DatasetName).Index(9).Name("datasetName");
        Map(m => m.OwnerInstitutionCode).Index(10).Name("ownerInstitutionCode");
        Map(m => m.BasisOfRecord).Index(11).Name("basisOfRecord");
        Map(m => m.CatalogNumber).Index(12).Name("catalogNumber");
        Map(m => m.RecordedBy).Index(13).Name("recordedBy");
        Map(m => m.IndividualCount).Index(14).Name("individualCount");
        Map(m => m.Sex).Index(15).Name("sex");
        Map(m => m.LifeStage).Index(16).Name("lifeStage");
        Map(m => m.OccurrenceStatus).Index(17).Name("occurrenceStatus");
        Map(m => m.Preparations).Index(18).Name("preparations");
        Map(m => m.AssociatedMedia).Index(19).Name("associatedMedia");
        Map(m => m.EventId).Index(20).Name("eventID");
        Map(m => m.SamplingProtocol).Index(21).Name("samplingProtocol");
        Map(m => m.EventDate).Index(22).Name("eventDate");
        Map(m => m.EventTime).Index(23).Name("eventTime");
        Map(m => m.Year).Index(24).Name("year");
        Map(m => m.Month).Index(25).Name("month");
        Map(m => m.Day).Index(26).Name("day");
        Map(m => m.FieldNumber).Index(27).Name("fieldNumber");
        Map(m => m.LocationId).Index(28).Name("locationID");
        Map(m => m.HigherGeography).Index(29).Name("higherGeography");
        Map(m => m.Continent).Index(30).Name("continent");
        Map(m => m.WaterBody).Index(31).Name("waterBody");
        Map(m => m.Country).Index(32).Name("country");
        Map(m => m.StateProvince).Index(33).Name("stateProvince");
        Map(m => m.IslandGroup).Index(34).Name("islandGroup");
        Map(m => m.Island).Index(35).Name("island");
        Map(m => m.County).Index(36).Name("county");
        Map(m => m.Municipality).Index(37).Name("municipality");
        Map(m => m.Locality).Index(38).Name("locality");
        Map(m => m.VerbatimLocality).Index(39).Name("verbatimLocality");
        Map(m => m.MinimumElevationInMeters).Index(40).Name("minimumElevationInMeters");
        Map(m => m.MaximumElevationInMeters).Index(41).Name("maximumElevationInMeters");
        Map(m => m.MinimumDepthInMeters).Index(42).Name("minimumDepthInMeters");
        Map(m => m.MaximumDepthInMeters).Index(43).Name("maximumDepthInMeters");
        Map(m => m.DecimalLatitude).Index(44).Name("decimalLatitude");
        Map(m => m.DecimalLongitude).Index(45).Name("decimalLongitude");
        Map(m => m.GeodeticDatum).Index(46).Name("geodeticDatum");
        Map(m => m.CoordinateUncertaintyInMeters).Index(47).Name("coordinateUncertaintyInMeters");
        Map(m => m.GeoreferencedBy).Index(48).Name("georeferencedBy");
        Map(m => m.GeoreferencedDate).Index(49).Name("georeferencedDate");
        Map(m => m.GeoreferenceProtocol).Index(50).Name("georeferenceProtocol");
        Map(m => m.GeoreferenceSources).Index(51).Name("georeferenceSources");
        Map(m => m.IdentifiedBy).Index(52).Name("identifiedBy");
        Map(m => m.DateIdentified).Index(53).Name("dateIdentified");
        Map(m => m.IdentificationQualifier).Index(54).Name("identificationQualifier");
        Map(m => m.TypeStatus).Index(55).Name("typeStatus");
        Map(m => m.ScientificName).Index(56).Name("scientificName");
        Map(m => m.HigherClassification).Index(57).Name("higherClassification");
        Map(m => m.Kingdom).Index(58).Name("kingdom");
        Map(m => m.Phylum).Index(59).Name("phylum");
        Map(m => m.Class).Index(60).Name("class");
        Map(m => m.Order).Index(61).Name("order");
        Map(m => m.Family).Index(62).Name("family");
        Map(m => m.Genus).Index(63).Name("genus");
        Map(m => m.Subgenus).Index(64).Name("subgenus");
        Map(m => m.SpecificEpithet).Index(65).Name("specificEpithet");
        Map(m => m.InfraspecificEpithet).Index(66).Name("infraspecificEpithet");
        Map(m => m.TaxonRank).Index(67).Name("taxonRank");
        Map(m => m.ScientificNameAuthorship).Index(68).Name("scientificNameAuthorship");
        Map(m => m.VernacularName).Index(69).Name("vernacularName");
        Map(m => m.NomenclaturalCode).Index(70).Name("nomenclaturalCode");
        Map(m => m.Blocked).Index(71).Name("blocked");
        Map(m => m.Disposition).Index(72).Name("disposition");
        Map(m => m.MaterialSampleType).Index(73).Name("materialSampleType");
        Map(m => m.PreparationType).Index(74).Name("preparationType");
        Map(m => m.PreparationMaterials).Index(75).Name("preparationMaterials");
        Map(m => m.PreparedBy).Index(76).Name("preparedBy");
        Map(m => m.PreparationDate).Index(77).Name("preparationDate");
        Map(m => m.PreservationType).Index(78).Name("preservationType");
        Map(m => m.PreservationTemperature).Index(79).Name("preservationTemperature");
        Map(m => m.PreservationDateBegin).Index(80).Name("preservationDateBegin");
        Map(m => m.RelatedResourceId).Index(81).Name("relatedResourceId");
        Map(m => m.RelationshipOfResource).Index(82).Name("relationshipOfResource");
    }
}